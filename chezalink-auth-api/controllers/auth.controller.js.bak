const jwt = require('jsonwebtoken'); // For creating JWT tokens
const bcrypt = require('bcrypt');    // For hashing passwords
require('dotenv').config();          // Load variables from .env

// Temporary in-memory user store (will be replaced with a database)
const users = [];

// Helper function to generate a JWT token
const generateToken = (user) => {
  return jwt.sign(
    {
      user_name: user.user_name,  // ðŸ‘ˆ Used across all APIs now
      email: user.email,
      
    },
    process.env.JWT_SECRET,
    { expiresIn: '10h' }
  );
};

// Controller for user signup
const signup = async (req, res) => {
  const { user_name, email, password, role } = req.body; // ðŸ‘ˆ Updated: user_name & role

  // Check if the user_name or email already exists
  const userExists = users.find((user) => user.email === email || user.user_name === user_name);
  if (userExists) {
    return res.status(400).json({ message: 'User already exists' });
  }

  try {
    // Hash the password using bcrypt
    const hashedPassword = await bcrypt.hash(password, 10);

    // Create new user object
    const newUser = {
      user_name,         // ðŸ‘ˆ Unique identifier (used in profile FK)
      email,
      password: hashedPassword,
      role               // Optional: player, scout, institution, etc.
    };

    // Store the user
    users.push(newUser);

    // Generate token
    const token = generateToken(newUser);

    res.status(201).json({
      message: 'User created',
      user: {
        user_name: newUser.user_name,
        email: newUser.email,
        role: newUser.role
      },
      token
    });
  } catch (error) {
    console.error('Signup error:', error);
    res.status(500).json({ message: 'Something went wrong' });
  }
};

// Controller for user login
const login = async (req, res) => {
  const { email, password } = req.body;

  // Find user
  const user = users.find((u) => u.email === email);
  if (!user) {
    return res.status(401).json({ message: 'Invalid credentials' });
  }

  try {
    // Compare passwords
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    // Generate token
    const token = generateToken(user);

    res.json({
      message: 'Login successful',
      user: {
        user_name: user.user_name,
        email: user.email,
        role: user.role
      },
      token
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ message: 'Something went wrong' });
  }
};

// Export functions
module.exports = {
  signup,
  login
};
